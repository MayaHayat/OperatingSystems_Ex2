void handle_get(int client_socket, char *path) {
    FILE *file = fopen(path, "rb");
    if (!file) {
        send(client_socket, "404 FILE NOT FOUND\r\n\r\n", strlen("404 FILE NOT FOUND\r\n\r\n"), 0);
    } else {
        // Lock the file for reading
        struct flock lock;
        lock.l_type = F_RDLCK;
        lock.l_whence = SEEK_SET;
        lock.l_start = 0;
        lock.l_len = 0;

        if (fcntl(fileno(file), F_SETLK, &lock) == -1) {
            perror("Error locking file");
            fclose(file);
            send(client_socket, "500 INTERNAL ERROR\r\n\r\n", strlen("500 INTERNAL ERROR\r\n\r\n"), 0);
            close(client_socket);
            exit(1);
        }

        send(client_socket, "200 OK\r\n", strlen("200 OK\r\n"), 0);
        
        char buffer[BUFFER_SIZE];
        size_t bytes_read;
        while ((bytes_read = fread(buffer, 1, BUFFER_SIZE, file)) > 0) {
            send(client_socket, buffer, bytes_read, 0);
            printf("Client requested get -> sending\n");
        }
        
        // Unlock the file after reading
        lock.l_type = F_UNLCK;
        if (fcntl(fileno(file), F_SETLK, &lock) == -1) {
            perror("Error unlocking file");
            fclose(file);
            close(client_socket);
            exit(1);
        }

        fclose(file);
    }
}

void handle_post(int client_socket, const char *full_path, char* token) {
    struct flock lock;
    lock.l_type = F_WRLCK; 
    lock.l_whence = SEEK_SET;
    lock.l_start = 0;
    lock.l_len = 0;

    FILE *file = fopen(full_path, "w");
    if (!file) {
        perror("Error opening file");
        send(client_socket, "500 INTERNAL ERROR\r\n\r\n", strlen("500 INTERNAL ERROR\r\n\r\n"), 0);
        close(client_socket);
        exit(1);
    }

    // Lock the file for writing
    if (fcntl(fileno(file), F_SETLK, &lock) == -1) {
        perror("Error locking file");
        fclose(file);
        send(client_socket, "500 INTERNAL ERROR\r\n\r\n", strlen("500 INTERNAL ERROR\r\n\r\n"), 0);
        close(client_socket);
        exit(1);
    }

    // Into the new file
    while (1) {
        token = strtok(NULL, "\r\n");
        if (!token)
            break;
        fprintf(file, "%s", token);
    }

    printf("Finished writing to file\n");
    fflush(stdout);

    // Unlock the file after writing
    lock.l_type = F_UNLCK;
    if (fcntl(fileno(file), F_SETLK, &lock) == -1) {
        perror("Error unlocking file");
        fclose(file);
        close(client_socket);
        exit(1);
    }

    fclose(file);

    send(client_socket, "200 OK\r\n\r\n", strlen("200 OK\r\n\r\n"), 0);
}
